export class TransactionalRequestModel {      
      createOrderRequest: CreateOrderRequest;
      createCustomerRequest: CreateCustomerRequest;
      chargeCreditCardTokenRequest: ChargeCreditCardTokenRequest;
      createAutoOrderRequest: CreateAutoOrderRequest;
      setAccountCreditCardTokenRequest: SetAccountCreditCardTokenRequest;
}

  export class CreateOrderRequest {
      other14: string;
      other15: string;
      other16: string;
      other17: string;
      other18: string;
      other19: string;
      other20: string;
      orderType: any;
      taxRateOverride: number | null;
      shippingAmountOverride: number | null;
      other13: string;
      useManualOrderID: boolean | null;
      transferVolumeToID: number | null;
      returnOrderID: number | null;
      overwriteExistingOrder: boolean;
      existingOrderID: number;
      partyID: number | null;
      details: any[];
      suppressPackSlipPrice: boolean;
      transferVolumeToKey: string;
      returnOrderKey: string;
      manualOrderKey: string;
      manualOrderID: number | null;
      existingOrderKey: string;
      other12: string;
      notes: string;
      customerID: number;
      orderStatus: any;
      orderDate: string;
      currencyCode: string;
      warehouseID: number;
      shipMethodID: number;
      priceType: number;
      firstName: string;
      middleName: string;
      lastName: string;
      other11: string;
      nameSuffix: string;
      address1: string;
      address2: string;
      address3: string;
      city: string;
      state: string;
      zip: string;
      country: string;
      county: string;
      email: string;
      phone: string;
      company: string;
      customerKey: string;
}

export class CreateCustomerRequest {
      subscribeFromIPAddress: string;
      subscribeToBroadcasts: boolean;
      field15: string;
      field14: string;
      field13: string;
      field12: string;
      field11: string;
      field10: string;
      field9: string;
      field8: string;
      field7: string;
      field6: string;
      field5: string;
      field4: string;
      field3: string;
      field2: string;
      field1: string;
      birthDate: string;
      isSalesTaxExempt: boolean | null;
      currencyCode: string;
      salesTaxExemptExpireDate: string | null;
      payableToName: string;
      defaultWarehouseID: number | null;
      sponsorKey: string;
      otherAddressVerified: boolean | null;
      mailAddressVerified: boolean | null;
      mainAddressVerified: boolean | null;
      useBinaryHoldingTank: boolean | null;
      binaryPlacementPreference: number | null;
      nameSuffix: string;
      middleName: string;
      date5: string | null;
      date4: string | null;
      date3: string | null;
      date2: string | null;
      date1: string | null;
      vatRegistration: string;
      gender: any | null;
      languageID: number;
      taxIDType: string;
      checkThreshold: number | null;
      payableType: any | null;
      entryDate: string;
      salesTaxID: string;
      taxID: string;
      manualCustomerID: number;
      mainCounty: string;
      mainCountry: string;
      mainZip: string;
      mainState: string;
      mainCity: string;
      mainAddress3: string;
      mainAddress2: string;
      mainAddress1: string;
      notes: string;
      fax: string;
      mobilePhone: string;
      phone2: string;
      phone: string;
      email: string;
      customerStatus: number | null;
      customerType: number;
      company: string;
      lastName: string;
      firstName: string;
      mailAddress1: string;
      mailAddress2: string;
      mailAddress3: string;
      mailCity: string;
      useManualCustomerID: boolean;
      sponsorID: number;
      insertUnilevelTree: boolean;
      enrollerID: number;
      insertEnrollerTree: boolean;
      loginPassword: string;
      loginName: string;
      canLogin: boolean;
      otherCounty: string;
      enrollerKey: string;
      otherCountry: string;
      otherState: string;
      otherCity: string;
      otherAddress3: string;
      otherAddress2: string;
      otherAddress1: string;
      mailCounty: string;
      mailCountry: string;
      mailZip: string;
      mailState: string;
      otherZip: string;
      manualCustomerKey: string;
}

export class ChargeCreditCardTokenRequest {
      otherData9: string;
      otherData8: string;
      otherData7: string;
      otherData6: string;
      otherData5: string;
      otherData4: string;
      otherData3: string;
      otherData2: string;
      otherData1: string;
      clientIPAddress: string;
      merchantWarehouseIDOverride: number | null;
      maxAmount: number | null;
      otherData10: string;
      orderID: number;
      expirationMonth: number | null;
      creditCardType: number | null;
      issueNumber: string;
      cvcCode: string;
      billingCountry: string;
      billingZip: string;
      billingState: string;
      billingCity: string;
      billingAddress2: string;
      billingAddress: string;
      billingName: string;
      creditCardToken: string;
      expirationYear: number | null;
      orderKey: string;
}

export class CreateAutoOrderRequest {
      county: string;
      email: string;
      phone: string;
      notes: string;
      other11: string;
      other12: string;
      other13: string;
      other14: string;
      country: string;
      other15: string;
      other17: string;
      other18: string;
      other19: string;
      other20: string;
      description: string;
      overwriteExistingAutoOrder: boolean;
      existingAutoOrderID: number;
      details: any[];
      other16: string;
      zip: string;
      state: string;
      city: string;
      customerID: number;
      frequency: any;
      startDate: string;
      stopDate: string | null;
      specificDayInterval: number | null;
      currencyCode: string;
      warehouseID: number;
      shipMethodID: number;
      priceType: number;
      paymentType: any;
      processType: any | null;
      firstName: string;
      middleName: string;
      lastName: string;
      nameSuffix: string;
      company: string;
      address1: string;
      address2: string;
      address3: string;
      customerKey: string;
      customFrequencyTy: number;
}

export class SetAccountCreditCardTokenRequest {
      tokenType: number | null;
      movePrimaryToSecondary: boolean;
      customerKey: string;
      hideFromWeb: boolean | null;
      billingCountry: string;
      billingZip: string;
      billingState: string;
      billingCity: string;
      firstSix: string;
      billingAddress2: string;
      useMainAddress: boolean;
      billingName: string;
      creditCardType: number | null;
      expirationYear: number;
      expirationMonth: number;
      creditCardToken: string;
      creditCardAccountType: any;
      customerID: number;
      billingAddress: string;
      lastFour: string;
}
