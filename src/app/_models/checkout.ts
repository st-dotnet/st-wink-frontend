export class TransactionalRequestModel {
  createCustomerRequest: CreateCustomerRequest;
  createOrderRequest: CreateOrderRequest;
  chargeCreditCardTokenRequest: ChargeCreditCardTokenRequest;
  createAutoOrderRequest: CreateAutoOrderRequest;
  setAccountCreditCardTokenRequest: SetAccountCreditCardTokenRequest;
  setListItemRequest: any[];
}

export class CreateOrderRequest {
  other14: string;
  other15: string;
  other16: string;
  other17: string;
  other18: string;
  other19: string;
  other20: string;
  orderType: any;
  taxRateOverride?: number;
  shippingAmountOverride: number;
  other13: string;
  useManualOrderID?: boolean;
  transferVolumeToID?: number;
  returnOrderID?: number;
  overwriteExistingOrder: boolean;
  existingOrderID: number;
  partyID: number;
  details: OrderDetailRequest[];
  suppressPackSlipPrice: boolean;
  transferVolumeToKey: string;
  returnOrderKey: string;
  manualOrderKey: string;
  manualOrderID?: number;
  existingOrderKey: string;
  other12: string;
  notes: string;
  customerID: number;
  orderStatus: any;
  orderDate: any;
  currencyCode: string;
  warehouseID: number;
  shipMethodID: number;
  priceType: number;
  firstName: string;
  middleName: string;
  lastName: string;
  other11: string;
  nameSuffix: string;
  address1: string;
  address2: string;
  address3: string;
  city: string;
  state: string;
  zip: string;
  country: string;
  county: string;
  email: string;
  phone: string;
  company: string;
  customerKey: string;
}

export class CreateCustomerRequest {
  subscribeFromIPAddress: string;
  subscribeToBroadcasts: boolean;
  field15: string;
  field14: string;
  field13: string;
  field12: string;
  field11: string;
  field10: string;
  field9: string;
  field8: string;
  field7: string;
  field6: string;
  field5: string;
  field4: string;
  field3: string;
  field2: string;
  field1: string;
  birthDate: string;
  isSalesTaxExempt?: boolean;
  currencyCode: string;
  salesTaxExemptExpireDate: any;
  payableToName: string;
  defaultWarehouseID?: number;
  sponsorKey: string;
  otherAddressVerified: boolean;
  mailAddressVerified: boolean;
  mainAddressVerified: boolean;
  useBinaryHoldingTank: boolean;
  binaryPlacementPreference?: number;
  nameSuffix: string;
  middleName: string;
  date5: any;
  date4: any;
  date3: any;
  date2: any;
  date1: any;
  vatRegistration: string;
  gender: any;
  languageID: number;
  taxIDType: string;
  checkThreshold?: number;
  payableType?: any;
  entryDate: string;
  salesTaxID: string;
  taxID: string;
  manualCustomerID: number;
  mainCounty: string;
  mainCountry: string;
  mainZip: string;
  mainState: string;
  mainCity: string;
  mainAddress3: string;
  mainAddress2: string;
  mainAddress1: string;
  notes: string;
  fax: string;
  mobilePhone: string;
  phone2: string;
  phone: string;
  email: string;
  customerStatus?: number;
  customerType: number;
  company: string;
  lastName: string;
  firstName: string;
  mailAddress1: string;
  mailAddress2: string;
  mailAddress3: string;
  mailCity: string;
  useManualCustomerID: boolean;
  sponsorID: number;
  insertUnilevelTree: boolean;
  enrollerID: number;
  insertEnrollerTree: boolean;
  loginPassword: string;
  loginName: string;
  canLogin: boolean;
  otherCounty: string;
  enrollerKey: string;
  otherCountry: string;
  otherState: string;
  otherCity: string;
  otherAddress3: string;
  otherAddress2: string;
  otherAddress1: string;
  mailCounty: string;
  mailCountry: string;
  mailZip: string;
  mailState: string;
  otherZip: string;
  manualCustomerKey: string;
}

export class ChargeCreditCardTokenRequest {
  otherData9: string;
  otherData8: string;
  otherData7: string;
  otherData6: string;
  otherData5: string;
  otherData4: string;
  otherData3: string;
  otherData2: string;
  otherData1: string;
  clientIPAddress: string;
  merchantWarehouseIDOverride?: number;
  maxAmount?: number;
  otherData10: string;
  orderID: number;
  expirationMonth?: number;
  creditCardType?: number;
  issueNumber: string;
  cvcCode: string;
  billingCountry: string;
  billingZip: string;
  billingState: string;
  billingCity: string;
  billingAddress2: string;
  billingAddress: string;
  billingName: string;
  creditCardToken: string;
  expirationYear?: number;
  orderKey: string;
}

export class CreateAutoOrderRequest {
  county: string;
  email: string;
  phone: string;
  notes: string;
  other11: string;
  other12: string;
  other13: string;
  other14: string;
  country: string;
  other15: string;
  other17: string;
  other18: string;
  other19: string;
  other20: string;
  description: string;
  overwriteExistingAutoOrder: boolean;
  existingAutoOrderID: number;
  details: any[];
  other16: string;
  zip: string;
  state: string;
  city: string;
  customerID: number;
  frequency: any;
  startDate: string;
  stopDate: any;
  specificDayInterval?: number;
  currencyCode: string;
  warehouseID: number;
  shipMethodID: number;
  priceType: number;
  paymentType: any;
  processType: any;
  firstName: string;
  middleName: string;
  lastName: string;
  nameSuffix: string;
  company: string;
  address1: string;
  address2: string;
  address3: string;
  customerKey: string;
  customFrequencyTy: number;
}

export class SetAccountCreditCardTokenRequest {
  tokenType?: number;
  movePrimaryToSecondary: boolean;
  customerKey: string;
  hideFromWeb: boolean;
  billingCountry: string;
  billingZip: string;
  billingState: string;
  billingCity: string;
  firstSix: string;
  billingAddress2: string;
  useMainAddress: boolean;
  billingName: string;
  creditCardType?: number;
  expirationYear: number;
  expirationMonth: number;
  creditCardToken: string;
  creditCardAccountType: any;
  customerID: number;
  billingAddress: string;
  lastFour: string;
}

export class OrderDetailRequest {
  descriptionOverride?: string;
  other10EachOverride?: number;
  other9EachOverride?: number;
  other8EachOverride?: number;
  other7EachOverride?: number;
  other6EachOverride?: number;
  other5EachOverride?: number;
  other4EachOverride?: number;
  other3EachOverride?: number;
  other2EachOverride?: number;
  other1EachOverride?: number;
  commissionableVolumeEachOverride?: number;
  businessVolumeEachOverride?: number;
  shippingPriceEachOverride?: number;
  taxableEachOverride?: number;
  priceEachOverride?: number;
  parentItemCode: string;
  quantity: number;
  parentOrderDetailID: any;
  orderDetailID: any;
  itemCode: string;
  reference1: string;
  advancedAutoOptions: AdvancedAutoOptionsRequest;
}

export class AdvancedAutoOptionsRequest {
  processWhileDate: any;
  skipUntilDate: any;
  detailStartDate: any;
  detailEndDate: any;
  detailInterval?: number;
}
